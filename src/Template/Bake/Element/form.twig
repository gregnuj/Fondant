{#
/**
 * CakePHP(tm) : Rapid Development Framework (http://cakephp.org)
 * Copyright (c) Cake Software Foundation, Inc. (http://cakefoundation.org)
 *
 * Licensed under The MIT License
 * For full copyright and license information, please see the LICENSE.txt
 * Redistributions of files must retain the above copyright notice.
 *
 * @copyright     Copyright (c) Cake Software Foundation, Inc. (http://cakefoundation.org)
 * @link          http://cakephp.org CakePHP(tm) Project
 * @since         2.0.0
 * @license       http://www.opensource.org/licenses/mit-license.php MIT License
 */
#}
{% set fields = Bake.filterFields(fields, schema, modelObject) %}
{% set associations = {'BelongsTo': [], 'HasOne': [], 'HasMany': [], 'BelongsToMany': []}|merge(associations) %}
{% set fieldsData = Bake.getViewFieldsData(fields, schema, associations) %}
{% set associationFields = fieldsData.associationFields %}

<div class="{{ pluralVar }} form large-9 medium-8 columns content">
    <?= $this->Form->create(isset(${{ singularVar }}) ? ${{ singularVar }} : '{{ singularVar }}') ?>
    <fieldset>
        <legend><?= __('{{ action|humanize }} {{ singularHumanName }}') ?></legend>
        <?php
{% for field in fields if field not in primaryKey %}


    {%- if keyFields[field] %}
        {%- set fieldData = Bake.columnData(field, schema) %}
        {%- set details = associationFields[field] %}
        if (isset(${{ singularVar }}->{{ details.property }}->{{ details.displayField }})): 
            ${{ keyFields[field] }} = [ ${{ singularVar }}->{{ details.property }}->{{ details.primaryKey[0] }} => ${{ singularVar }}->{{ details.property }}->{{ details.displayField }} ];
        else:
            ${{ keyFields[field] }} = [];
        endif;
        echo $this->Form->control('{{ field }}', [
            'label' => '{{ details.property|humanize }}', 
            'options' => ${{ keyFields[field] }},
            'data-ajax-url' => $this->Url->build(['controller' => '{{ details.controller }}', 'action' => 'select2', '_ext' => 'json']),
            'data-id' => isset(${{ singularVar }}->{{ details.property }}->{{ details.primaryKey[0] }}) ? ${{ singularVar }}->{{ details.property }}->{{ details.displayField }} : '',
            'data-text' => isset(${{ singularVar }}->{{ details.property }}->{{ details.displayField }}) ? ${{ singularVar }}->{{ details.property }}->{{ details.displayField }} : '',
            'class' => 'form-control form-control-sm aero-auto-complete',
        ]);
        {{- "\n" }}

    {%- elseif field not in ['created', 'modified', 'updated', 'created_user', 'modified_user'] %}
        {%- set fieldData = Bake.columnData(field, schema) %}

        {%- if fieldData.type in ['date', 'datetime', 'time'] and fieldData.null %}
            echo $this->Form->control('{{ field }}', ['class' => 'form-control form-control-sm', 'empty' => true]);
            {{- "\n" }}

        {%- elseif fieldData.type in ['boolean'] %}
            echo $this->Form->control('{{ field }}', ['type' => 'checkbox']);
        {%- elseif fieldData.type in ['integer, mediauminteger, smallinteger'] %}
            echo $this->Form->control('{{ field }}', ['class' => 'form-control form-control-sm', 'type' => 'number', 'value' => isset(${{ singularVar }}->field) ? ${{ singularVar }}->field : 0 ]);
        {%- else %}
            echo $this->Form->control('{{ field }}', ['class' => 'form-control form-control-sm']);
    {{- "\n" }}
        {%- endif %}
    {%- endif %}
{%- endfor %}
        ?>
    </fieldset>
    <?= $this->Form->button(__('Submit'), ['class' => 'btn btn-sm btn-primary']) ?>
    <?= $this->Form->end() ?>
</div>
