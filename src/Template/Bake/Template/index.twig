{#
/**
 * CakePHP(tm) : Rapid Development Framework (http://cakephp.org)
 * Copyright (c) Cake Software Foundation, Inc. (http://cakefoundation.org)
 *
 * Licensed under The MIT License
 * For full copyright and license information, please see the LICENSE.txt
 * Redistributions of files must retain the above copyright notice.
 *
 * @copyright     Copyright (c) Cake Software Foundation, Inc. (http://cakefoundation.org)
 * @link          http://cakephp.org CakePHP(tm) Project
 * @since         2.0.0
 * @license       http://www.opensource.org/licenses/mit-license.php MIT License
 */
#}
<?php
/**
 * @var \{{ namespace }}\View\AppView $this
 * @var \{{ entityClass }}[]|\Cake\Collection\CollectionInterface ${{ pluralVar }}
 */
?>
{% set fields = Bake.filterFields(fields, schema, modelObject, indexColumns, ['binary', 'text']) %}


<div class="{{ pluralVar }} index large-9 medium-8 columns content">
    <!-- <h3><?= __('{{ pluralHumanName }}') ?></h3> -->
    <table id="{{ pluralVar }}Table" class="dataTable table table-striped table-sm" style="width: 95vw" cellpadding="0" cellspacing="0">
        <thead>
            <tr>
                <th style="min-width: 100px" scope="col" class="actions"><?= __('Actions') ?></th>
{% for field in fields %}
{% set isKey = false %}
{% if associations.BelongsTo %}
{% for alias, details in associations.BelongsTo if field == details.foreignKey %}
{% set isKey = true %}
                <th style="min-width: 75px" scope="col"><?= "{{ details.property|camelize }}" ?></th>
{% endfor %}
{% endif %}
{% if isKey is not same as(true) %}
                <th style="min-width: 75px" scope="col"><?= "{{ field|camelize }}" ?></th>
{% endif %}
{% endfor %}
            </tr>
        </thead>
        <tbody>
        </tbody>
        <tfoot>
        </tfoot>
    </table>
</div>

<?php $this->append('script'); ?>
<script>
var responsive = true;
$(document).ready(function(){
    
    table = $('#{{ pluralVar }}Table').DataTable({
        //"dom" : "Brtip",
        "dom": '<"top"p>Brtip<"bottom"><"clear">',
        "buttons": [
            { extend: 'pageLength', className: 'btn btn-outline-info buttons-collection dropdown-toggle buttons-page-length' },
            { extend: 'csv', className: 'btn btn-outline-info buttons-csv buttons-html5' },
            { extend: 'excel', className: 'btn btn-outline-info buttons-excel buttons-html5' },
            {
                text: 'Add',
                className: 'btn btn-outline-info buttons-html5',
                action: function ( e, dt, node, config ) {
                    window.location = "<?= $this->Url->build(['action' => 'add']); ?>";
                }
            }
        ],
        "paging" : true, 
        "filter" : true,
        "orderCellsTop" : true,
        "fixedHeader" : true,
        "processing": true,
        "serverSide": true,
        "lengthMenu": [[50, 100, 250, 500, 1000, 5000], [50, 100, 250, 500, 1000, "Max"]],
        "responsive":  responsive,
        "searchDelay": 750,
        //"autoWidth" : false,
        /*
        {
            "details": {
                display: $.fn.dataTable.Responsive.display.modal( {
                    header: function ( row ) {
                        var data = row.data();
                        return 'Details for '+data[0]+' '+data[1];
                    }
                } ),
                renderer: $.fn.dataTable.Responsive.renderer.tableAll()
            }
        },
        */
        "language": {
            "processing": "Loading. Please wait..."
        },
        "ajax": {
            "url": "<?= $this->Url->build(['action' => 'index']); ?>",
            "dataSrc": "{{pluralVar}}",
            "data" : { 
                "filter" : <?= json_encode($this->request->getQuery('filter')) ?>,
            },
        },
        "columns": [
                { 
                    "data" : "{{ primaryKey[0] }}",
                    "name" : "{{ primaryKey[0] }}",
                    "className" : "actions",
                    "render": function ( data, type, row, meta ) {
                        retval=""
                        retval+="<a href='<?= $this->Url->build(['action' => 'view']); ?>/"+data+"' class='btn btn-success text-white' role='button'><i class='fas fa-arrow-right'></i></a>"                      
                        retval+="<a href='<?= $this->Url->build(['action' => 'edit']); ?>/"+data+"' class='btn btn-warning text-white' role='button'><i class='fas fa-edit'></i></a>"
                        return retval;
                    }
                },
{% for field in fields %}
{% set isKey = false %}
{% if associations.BelongsTo %}
{% for alias, details in associations.BelongsTo if field == details.foreignKey %}
{% if isKey is not same as(true) %}
{% set isKey = true %}
                { 
                    "data" : null, 
                    "name" : "{{ field }}",
                    "render": function ( data, type, row, meta ) {
                        if (data.{{ details.property }} == null) {
                            retval="";
                        }else{
                            retval="<a href='{{ details.controller }}/view/"+data.{{ details.property }}.{{ details.primaryKey[0] }}+"'>"+data.{{ details.property }}.{{ details.displayField }}+"</a>";

                        }
                        return retval;
                    }
                },
{% endif %}
{% endfor %}
{% endif %}
{% if isKey is not same as(true) %}
                { "data" : "{{field}}", "name" : "{{field}}" },
{% endif %}
{% endfor %}

        ]
    });
    
    
    // Setup - add a text input to each header cell
    var thead0 = $('#{{ pluralVar }}Table thead tr');
    var thead1 = thead0.clone();
    thead1.insertAfter(thead0);
    $('#{{ pluralVar }}Table thead tr:eq(1) th').each( function () {
        var title = $(this).text();
        $(this).removeClass('sorting');
        $(this).width('0');
        $(this).html( '<input type="text" style="width:100%" placeholder="'+title+'" />' );
        //$(this).html( '<input type="text" style="width:100%" placeholder="" />' );
    } );
 
    // Apply the search
    table.columns().every( function (index) {
        var searchWaitInterval;
        var searchWait = 0;
        var that = this;
        var input = $( '#{{ pluralVar }}Table thead tr:eq(1) th:eq(' + index + ') input');
        // wait for user to stop typing
        input.unbind('keypress keyup').bind('keypress keyup', function(e){
            var item = this;
            searchWait = 0;
            if(!searchWaitInterval) searchWaitInterval = setInterval(function(){
                if(searchWait>=3){
                    clearInterval(searchWaitInterval);
                    searchWaitInterval = '';
                    if ( that.search() !== item.value ) {
                        that
                            .search( item.value )
                            .draw();
                    }
                    searchWait = 0;
                }
                searchWait++;
            },200);
        });
    });
    
	// workaround https://github.com/DataTables/Responsive/issues/71#issuecomment-360774517 
    table.on('responsive-resize.dt', function(e, datatable, columns) {
        columns.forEach(function(is_visible, index) {
            $.each($('tr', datatable.table().header()), function() {
                var col = $($(this).children()[index]);
                        is_visible == true ? col.show() : col.hide();
            });
        });
    });
    
    $('.paginate_button').css({'padding' : '0.5em 0'});
});

</script>
<?php $this->end(); ?>

